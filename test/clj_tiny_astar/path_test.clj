(ns clj-tiny-astar.path-test
  (:use [clojure.test]
        [clj-tiny-astar.path]))

(def test-grid
  ;0 1 2 3 4 5
  [1 1 1 1 1 1 ; 0
   1 0 0 1 1 1 ; 1
   1 0 1 1 1 1 ; 2
   1 0 0 0 1 1 ; 3
   1 1 1 1 1 1 ; 4
   ])

(def test-grid2
  ;0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
  [0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 0
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 1
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 2
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 3
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 4
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 5
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 6
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 7
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 8
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 9
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 10
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  0  0  0  0  0 ; 11
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  0  0  1  0  0  0  0  0  0  0  0  0  0 ; 12
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0  0  1  1  1  1  1  1  0  0  0  0  0 ; 13
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  1  0  0  1  1  0  0  0  1  0  0  0  0  0 ; 14
   0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  0  0  1  1  0  0  1  1  0  0  0  1  0  0  0  0  0 ; 15
   0  0  0  0  0  0  0  1  1  1  1  0  0  0  1  0  0  1  0  0  0  0  1  0  0  0  1  0  0  0  0  0 ; 16
   0  0  0  0  0  0  0  1  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0 ; 17
   0  0  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  0  0 ; 18
   0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0 ; 19
   0  0  0  0  0  0  0  1  1  1  1  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0 ; 20
   0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  1  1  1  1  1  0  0  0  1  0  0  0  0  0 ; 21
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  1  0  0  0  0  0 ; 22
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  1  1  1  1  1  0  0  0  0  0 ; 23
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 24
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 25
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 26
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 27
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 28
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 29
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 30
   0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  0  0  0  0  0  0  0  0  0  0  0  0  0 ; 31
   ])

(defn can-walkf
  [grid width]
  (fn [[x y]]
    (let [i (+ x (* y width))]
      (and (< -1 i (count grid))
           (= (grid i) 0)))))

(deftest walk1
  (is (=  [[2 1] [1 2] [2 3] [3 3]]
          (a* (can-walkf test-grid 6) [2 1] [3 3]))))

(deftest walk2
  (is (=  [[16 21] [16 20] [16 19]]
          (a* (can-walkf test-grid2 32) [16 21] [16 19]))))

(deftest walk3
  (is (=[[13 16] [13 17] [14 18] [15 17] [16 17] [17 18] [18 17] [18 16] [19 16] [20 17] [21 18] [22 19] [23 20] [23 21] [23 22]]
         (a* (can-walkf test-grid2 32) [13 16] [23 22]))))

